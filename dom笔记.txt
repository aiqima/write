#line line so easy, day day no bug

###node类型###
----------------------------------------------------------------------------------------------------------

nodeType = 1 元素节点;

nodeType = 2 属性节点;

nodeType = 3 文本节点;

document.creatElement('tag');		创建一个元素节点

document.createTextNode('value');	创建一个文本节点

document.creatAttribute('attr');	创建属性节点

Node.setAttributeNode(attr)			插入属性节点

parent.appendChild(child);			父元素最后插入子节点

parent.insertBefore(newNode,oldNode);	在指定元素前去插入

parent.replaceChild(newNode,oldNode);	替换节点

Node.cloneNode(true)			克隆节点，true表示深克隆

nodeName = 元素名， nodeVaule = null;

Node.childElementCount			可以查看一个元素的子节点元素个数，等于Node.children.length

Node.hasChildNodes()			查看一个元素是否有子节点


###document类型###
----------------------------------------------------------------------------------------------------------

document.nodeName = #document		表示整个页面文档

document.nodeTpye = 9				文档节点

document.childElementCount			1

document.doctype					文档类型

document.documentElement			<html>

document.body						<body>
	
document.title						<title>

document.URL						页面完整url

document.domain						主域名

document.referrer					链接到当前页面的页面的url

document.getElementById()			获取id

document.getElementsTagName(tag)	获取标签

document.getElementsByName()		获取名称

document.write()					输出文本

document.writeln()					输出文本，末尾自动 + \n 换行


###element类型###
----------------------------------------------------------------------------------------------------------

element.nodeName = tag  			标签名（大写）

element.nodeType = 1

element.nodeVaule = null

element.getAttribute(name);				获取元素属性

element.setAttribute(name,value);		设置元素属性

element.removeAttribut(name);			移除属性

element.attributes						元素全部属性（NodeList形式）

element.attributes[0].nodeName			属性名

element.attributes[0].nodeVaule			属性值

document.createElement(tag)				创建element

可直接访问的元素属性

element.id
element.title
element.style
element.className
element.onClick


###text类型###
----------------------------------------------------------------------------------------------------------
				
node.nodeName = #text

node.nodeType = 3

node.nodeValue = 文本内容

node.data								文本内容

node.appendData(text)					text添加到节点末尾

node.deleteData(offset,count)			从 offset 指定的位置开始删除 count 个字符

node.insertData(offet,text);			从 offset 位置插入 text

node.replaceData(offset,count,text);	从 offset 位置用 text 替换 count 个字符

node.splitText(offset);					从 offset 位置将当前文本分成两个节点

element.normalize();					合并 element 内的所有文本节点

document.createTextNode(value)			创建文本节点


###comment类型###
----------------------------------------------------------------------------------------------------------
	
node.nodeType = 8

node.nodeName = #comment		注释节点

node.nodeValue 					注释内容


###CDATASection类型###
----------------------------------------------------------------------------------------------------------

CDATASection类型只针对XML文档


###Attr类型###
----------------------------------------------------------------------------------------------------------
	
attr.nodeType = 2

attr.nodeName 				属性名称

attr.nodeValue				属性值

attr.name					名

attr.value					值

attr.specified				布尔值，属性是否存在

getAttribute()				获取属性

setAttribute()				创建属性

removeAttribut()			移除属性



###DOM操作###
----------------------------------------------------------------------------------------------------------
	
#动态脚本
function loadScript(fileAdress){
	var script = document.createElement('script');
	script.type = 'text/script';
	script.src = fileAdress;
	document.body.appendChild(script);
}

#动态样式
function loadLink(url){
	var link = document.createElement('link');
	link.rel = 'stylesheet';
	link.type = 'text/css';
	link.href = url;
	var head = document.getElementsTagName('head')[0];
	head.appendChild(link);

}

#NodeList动态集合
迭代NodeList列表，将NodeList.length属性赋值一个变量再访问


###Selector API###
----------------------------------------------------------------------------------------------------------

querySelector();			接受css选择符，匹配第一个元素

querySelector('.box') = $('.box');

querySelectorAll();			接受css选择符，返回NodeList

Selector API 可被 document 和 element 调用


###元素遍历###
----------------------------------------------------------------------------------------------------------	

childElementCount			子元素个数

firstElementChild			第一个子元素

lastElementChild			最后一个子元素

previousElementSibling		上一个兄弟元素

nextElementSibling			下一个兄弟元素


###HTML5 DOM###
----------------------------------------------------------------------------------------------------------

#classList

getElementsByClassName();	获取类

classList.add(value);		添加类

classList.remove(value);	移除类

classList.toggle(value);	切换类

classList.contains(value);	判断类

#焦点管理

document.activeElement		指向获得焦点的元素

element.focus()				元素获得焦点

#HTML 内容

readyState					兼容模式检测

innerHTML					替换容器内的内容

outerHTML					替换容器内容，包括容器本身


#专有扩展

parent.contains(children);	检查children是否为parent的子节点

innerText					替换容器内文本

outerText					替换容器文本，包括容器本身



###DOM2,DOM3###
----------------------------------------------------------------------------------------------------------

#dom样式

cssText						dom样式的text文本

getComputedStyle(element.node,null)			取得计算后的样式（包括内联和外文件样式），第二个参数可传入伪类，如：after

var myDiv = document.getElementById("myDiv");
var computedStyle = document.defaultView.getComputedStyle(myDiv, null);


function getStyleSheet(ele){
	return ele.sheet || ele.StyleSheet;
}
var link = document.getElementsByTagName("link")[0];
var sheet = getStyleSheet(link);

sheet.insertRule('body{color:red;}',0);			插入规则

sheet.deleteRule(0);							删除规则


#元素大小

offsetLeft						 左外边框到包含元素的距离

offsetTop						 右外边框到包含元素的距离

offsetParent					 包含元素

clientWidth						 内容宽度

clientHeight					 内容高度

scrollHeight					 滚动条高度

scrollWidth						滚动条宽度

scrollTop						被隐藏在元素上方的区域高度

scrollLeft						被隐藏在元素左方的区域宽度























	




	